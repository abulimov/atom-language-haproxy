# ------------------------------------------
# This file is auto-generated by generate.py
# https://github.com/abulimov/atom-language-haproxy
# ------------------------------------------
fileTypes: [
  "haproxy"
  "cfg"
]
foldingStartMarker: "^(backend|cache|defaults|frontend|global|listen|mailers|peers|program|resolvers|ruleset|userlist)"
foldingStopMarker: "^(backend|cache|defaults|frontend|global|listen|mailers|peers|program|resolvers|ruleset|userlist)"
name: "HAProxy"
patterns: [
  {
    captures:
      "2":
        name: "string.unquoted.sectionname.haproxy-config"
      "3":
        name: "variable.parameter.ip-port.haproxy-config"
      "5":
        name: "punctuation.separator.ip.haproxy-config"
      "6":
        name: "variable.parameter.ip-port.haproxy-config"
    match: "^(backend|cache|defaults|frontend|global|listen|mailers|peers|program|resolvers|ruleset|userlist)\\s*(\\S+)?\\s*((\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})?:\\d{1,5})?(,)?((\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})?:\\d{1,5})?"
    name: "meta.tag.haproxy-config"
  }
  # Comment
  {
    match: "#.+$"
    name: "comment.line.number-sign.haproxy-config"
  }
  # IP address:port
  {
    match: "(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})?:\\d{1,5}"
    name: "variable.parameter.ip-port.haproxy-config"
  }
  # Numbers
  {
     # this also inludes ip address-like dot separated instant with optional port
     # also optional letter supported, like '100s'
    match: "\\b[0-9]+([\\.:][0-9]+)*[a-z]?\\b"
    name: "constant.numeric.haproxy-config"
  }
  # Keywords
  {
    match: "{keywords}"
    name: "keyword.other.no-validate-params.haproxy-config"
  }
  # Global keywords
  {
    match: "{global_keywords}"
    name: "keyword.other.no-validate-params.haproxy-config"
  }
  # Userlists
  {
    match: "{userlists_options}"
    name: "keyword.other.no-validate-params.haproxy-config"
  }
  # Mailers
  {
    match: "{mailers_options}"
    name: "keyword.other.no-validate-params.haproxy-config"
  }
  # Peers
  {
    match: "{peers_options}"
    name: "keyword.other.no-validate-params.haproxy-config"
  }
  # Programs
  {
    match: "{programs_options}"
    name: "keyword.other.no-validate-params.haproxy-config"
  }
  # Resolvers
  {
    match: "{resolvers_options}"
    name: "keyword.other.no-validate-params.haproxy-config"
  }
  # Cache
  {
    match: "\\s+(cache|total-max-size|max-object-size|max-age)(?=\\s+|$)"
    name: "keyword.other.no-validate-params.haproxy-config"
  }
  # Filter SPOE options
  {
    match: "\\s+(engine|config)(?=\\s+)"
    name: "variable.language.reserved.haproxy-config"
  }
  # Filter Trace options
  {
    match: "\\s+(name|random-parsing|random-forwarding|hexdump)(?=\\s+)"
    name: "variable.language.reserved.haproxy-config"
  }
  # Keywords made up of two words - first word
  {
    match: "{double_first}"
    name: "keyword.other.no-validate-params.haproxy-config"
  }
  # Keywords made up of two words - second word
  {
    match: "{double_second}"
    name: "variable.language.reserved.haproxy-config"
  }
  # Bind options
  {
    match: "{bind_options}"
    name: "variable.language.reserved.haproxy-config"
  }
  # Server options
  {
    match: "{server_options}"
    name: "variable.language.reserved.haproxy-config"
  }
  # Stick-table options
  {
    match: "\\s+(type|size|expire|nopurge|peers|store)(?=\\s+)"
    name: "variable.language.reserved.haproxy-config"
  }
  # http-request options
  {
    match: "{http_request_options}"
    name: "variable.language.reserved.haproxy-config"
  }
  # http-response options
  {
    match: "{http_response_options}"
    name: "variable.language.reserved.haproxy-config"
  }
  # Keyword options
  {
    match: "\\s+(roundrobin|static-rr|leastconn|first|url_param|health|global|httplog|except|kern|user|mail|daemon|auth|syslog|lpr|news|uucp|cron|auth2|ftp|ntp|audit|alert|cron2|local0|local1|local2|local3|local4|local5|local6|local7|emerg|crit|err|warning|notice|info|debug|rewrite|insert|nocache|postonly|indirect|prefix|location|scheme|code|request|response|header|check|cookie|weight|usesrc|http|tcp)(?=\\s+)"
    name: "variable.language.reserved.extra.haproxy-config"
  }
  {
    match: "\\\\"
    name: "constant.character.escape.haproxy-config"
  }
  # Converters
  {
    match: "{converters}"
    name: "entity.name.function.hdr.haproxy-config"
  }
  # Internal State Fetches
  {
    match: "\\s+({internal_state_fetches})\\b"
    name: "variable.function.haproxy-config"
  }
  # Layer 4 Fetches
  {
    match: "\\s+({layer4_fetches})\\b"
    name: "variable.function.haproxy-config"
  }
  # Layer 5 Fetches
  {
    match: "\\s+({layer5_fetches})\\b"
    name: "variable.function.haproxy-config"
  }
  # Layer 6 Fetches
  {
    match: "\\s+({layer6_fetches})\\b"
    name: "variable.function.haproxy-config"
  }
  # Layer 7 Fetches
  {
    match: "\\s+({layer7_fetches})\\b"
    name: "variable.function.haproxy-config"
  }
  # ACL conditionals
  {
    match: "\\b(if|unless)\\b"
    name: "keyword.control.conditional.haproxy-config"
  }
  # Filter SPOE options
  {
    match: "\\s+(engine|config)(?=\\s+)"
    name: "variable.language.reserved.haproxy-config"
  }
  {
    match: "%\\[[^\\]]+\\]"
    name: "variable.language.other.haproxy-config"
  }
  # Logical operators
  {
    match: "\\s+(or|\\|\\||!)\\s+"
    name: "keyword.operator.word.haproxy-config"
  }
]
scopeName: "source.haproxy-config"
